{
  
    
        "post0": {
            "title": "Neural Networks, Part II, First MNIST model",
            "content": "Other posts in series . Neural Networks, Part I, Basic network from scratch | . First MNIST model . Using the neural network class from Part I, I train a neural network on the MNIST dataset. . data_train, data_valid, data_test = mnist_loader.load_data() def train(): net = neural1.Network([784, 30, 10]) print(f&quot;Accuracy on testing data: {net.accuracy(data_test)}&quot;) net.sgd(data_train, 10, 10, 3.0) print(f&quot;Accuracy on testing data: {net.accuracy(data_test)}&quot;) with open(&#39;network1.config&#39;, &#39;wb&#39;) as f: pickle.dump(net, f) . The results of running this were: . Accuracy on testing data: 0.08475 Epoch 0 starting. Epoch 0 done. Accuracy is 0.902 Epoch 1 starting. Epoch 1 done. Accuracy is 0.912 Epoch 2 starting. Epoch 2 done. Accuracy is 0.931 Epoch 3 starting. Epoch 3 done. Accuracy is 0.939 Epoch 4 starting. Epoch 4 done. Accuracy is 0.930 Epoch 5 starting. Epoch 5 done. Accuracy is 0.943 Epoch 6 starting. Epoch 6 done. Accuracy is 0.943 Epoch 7 starting. Epoch 7 done. Accuracy is 0.948 Epoch 8 starting. Epoch 8 done. Accuracy is 0.948 Epoch 9 starting. Epoch 9 done. Accuracy is 0.950 Accuracy on testing data: 0.9496333333333333 . Next steps . I will continue to work through Nielsen’s online book, learning more about neural networks. .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/neural%20network/2020/07/14/neural2.html",
            "relUrl": "/python/data%20science/neural%20network/2020/07/14/neural2.html",
            "date": " • Jul 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Santander Dataset, Part II, Feature Selection",
            "content": "Other posts in series . Santander Dataset, Part I | . Introduction . After some Googling and reading of various blog posts and articles, I decide to carry out a few different feature selection techniques, record them all in a pandas frame, and pick out the important features as appropriate. The feature selection techniques I use are: . Calculate ANOVA F-value between each feature and prediction target | Obtain feature importances from XGBoost model | Calculate correlations between each feature and prediction target | Obtain coefficients from logistic regression with L1-regularisation | Obtain coefficients from logistic regression with L2-regularisation | . Visualising the feature scores . Below are plots showing how the different methods of measuring feature importance compare with one another. . The main takeaways for me are: . The different measures are all strong correlated with one another. This is a good thing of course, because it means there really is a consistent notion of feature importance. | The ANOVA F-values and correlations seem to provide exactly the same information. This is presumably not a coincidence, and there will probably be simple mathematical relationship between correlation and the F-values. | The L1- and L2-regularisations have a perfect correlation. Visually scanning the coefficients also showed they were almost exactly the same. This makes me suspicious and wonder if I did something wrong. As far as I could tell I did not. This is something for me to investigate in future, because I was expecting L1 and L2 regularisations to produce some noticable difference. | The logistic regressions and correlations have a very strong correlation. From my understanding this is not a coincidence - I believe there is a direct relationship between the coefficients and correlations (at least when there is only one feature variable). | The XGBoost feature importances are least correlated with the others. I suppose this makes, because I think the other four quantities have direct mathematical relationships between them, whereas tree-models are qualitatively different. | . To remove the non-linearity in some of the charts above, I decided to also plot feature ranks that these different measures produce. . There is nothing new shown in these graphs - it just makes the patterns listed above a bit clearer. . Models with only the most important features . Next I produced several logistic models keeping differing amounts of features removed. I used logistic models because they were the quickest to create. . The patterns here are clear. My takeaways are: . As you increase the number of features kept, the model improves. | The 100 least important features provide very little information to the models. | However, the 100 least important features do provide some information. The models did not improve by removing them. | . Conclusion . It looks like removing the least important features has not improved our models. The one thing it did improve was the time taken to create the models. Also, in a real-life situation (where we knew what the variables corresponded to), we would have gained insight into which variables are important, which presumably would help in decision-making. . Next steps . The next thing I will do is some hyper-parameter optimisations. After that, I will have used up all the tricks I have available, and then look at other people’s models and see what I can learn. .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/2020/07/13/santander2.html",
            "relUrl": "/python/data%20science/2020/07/13/santander2.html",
            "date": " • Jul 13, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Neural Networks, Part I, Basic network from scratch",
            "content": "Other posts in series . Neural Networks, Part II, First MNIST model | . Introduction . I finally take the plunge and create my first neural network. I have been holding back because I wanted to create my first neural networks from scratch before using the ready-made packages like TensorFlow or PyTorch. This is so that I would develop a deeper understanding (and I should probably do the same thing for the other big algorithms I have already used, like Random Forests). I take the plunge now because I came across this tutorial by Michael Nielsen which explains everything from scratch. (Funnily, I found this tutorial indirectly, via Michael’s excellent article on Quantum Computation). . The neural network I create is almost completely vanilla: no fancy architectures, the loss function is RSS, I use the sigmoid function for the activation function. The one non-vanilla idea was to use mini-batches to estimate the gradient of the cost function, instead of using the whole training dataset. After reading through Chapter 1 of Nielsen’s tutorial and skimming through the example code, I tried to create the program from scratch. I did check back with the example code on several occasions to check I was not going astray, so my code and his example are very similar. . Testing the code . To test the code works, I created some made up easy data to be classified (see code below) and achieved the following output: . Epoch 0 starting. Epoch 0 done. Accuracy is 0.518 Epoch 1 starting. Epoch 1 done. Accuracy is 0.582 Epoch 2 starting. Epoch 2 done. Accuracy is 0.893 Epoch 3 starting. Epoch 3 done. Accuracy is 0.919 Epoch 4 starting. Epoch 4 done. Accuracy is 0.956 Epoch 5 starting. Epoch 5 done. Accuracy is 0.973 Epoch 6 starting. Epoch 6 done. Accuracy is 0.966 Epoch 7 starting. Epoch 7 done. Accuracy is 0.966 Epoch 8 starting. Epoch 8 done. Accuracy is 0.967 Epoch 9 starting. Epoch 9 done. Accuracy is 0.971 Accuracy on testing data: 0.968 . It was satisfying to see that the code appears to work! . A proud moment . A part of doing things from scratch included deriving the back-propogation formulae. I found this trickier than I was expecting - afterall, I just have to use the Chain Rule over and over again. How hard can that be?? After straining my mind for some time, I think I have got it but am not sure. Before trying to code it up, I have a look at Nielsen’s code to check, and I got it correct. I was chuffed with myself! :D . Learning points . The main mistake I made when coding up the algorithm was not paying attention how a vector should be represented in NumPy. In particular, NumPy does not treat a rank-1 array of size (n) the same as a rank-2 array of size (1,n), for example, with transposing. This took some time to debug, because my first suspicion was that I mis-typed the formulae, or that I got the indices mixed up, or some other little error. In the end, I had to change how I coded the vectors to rank-2 arrays of size (1,n). | Nielsen often had a tidier way of coding the same steps or calculations, often by using zip. This is a useful little function which I will be sure to use in the future! | . Next steps . The immediate next step is to use this code to read hand-writing using the MNIST dataset, and then work through the rest of Nielsen’s tutorial where we optimise the network in various ways. After that, the world is my oyster! At some point, I need to learn some RL, so I can continue on my AI for Games project. . The code . import numpy as np import math import random class Network(): def __init__(self, sizes): self.n_layers = len(sizes) self.sizes = sizes self.biases = [np.random.normal(size = (1,size)) for size in sizes[1:]] self.weights = [np.random.normal(size = (size1, size2)) for size1, size2 in zip(sizes[:-1], sizes[1:])] def feed_forward(self, a): b = self.biases w = self.weights for i in range(self.n_layers - 1): a = vsigmoid(np.dot(a,w[i]) + b[i]) return a def sgd(self, data_train, epochs, mini_batch_size, learning_rate): n_dt = len(data_train) mbs = mini_batch_size for epoch in range(epochs): print(f&quot;Epoch {epoch} starting. &quot;, end = &quot;&quot;) random.shuffle(data_train) mini_batches = [data_train[k:k+mbs] for k in range(0, n_dt, mbs)] for mini_batch in mini_batches: self.update_via_minibatch(mini_batch, learning_rate) acc = self.accuracy(data_train) print(f&quot;Epoch {epoch} done. Accuracy is {acc:.3f}&quot;) return None def update_via_minibatch(self, mini_batch, learning_rate): mbs = len(mini_batch) delta_b = [np.zeros((1,size)) for size in self.sizes[1:]] delta_w = [np.zeros((size1, size2)) for size1, size2 in zip(self.sizes[:-1], self.sizes[1:])] for x,y in mini_batch: db, dw = self.backprop(x,y) delta_b = [b1 + b2 for b1,b2 in zip(delta_b, db)] delta_w = [w1 + w2 for w1,w2 in zip(delta_w, dw)] self.biases = [b - (learning_rate/mbs)*db for b, db in zip(self.biases, delta_b)] self.weights = [w - (learning_rate/mbs)*dw for w, dw in zip(self.weights, delta_w)] return None def backprop(self, x, y): # introduce shorthand notation for weights and biases w = self.weights b = self.biases # feedforward. store values of a and z a_temp = x z_temp = x a = [x] z = [x] for i in range(self.n_layers - 1): z_temp = np.dot(a_temp, w[i]) + b[i] a_temp = vsigmoid(z_temp) z.append(z_temp) a.append(a_temp) # define variables to store gradients grad_a = [None for _ in a] grad_z = [None for _ in z] grad_b = [None for _ in b] grad_w = [None for _ in w] n = self.n_layers # initialise gradients for a and z in final layer grad_a[n-1] = 2*(a[n-1]-y) temp = vsigmoid_prime(z[n-1])*grad_a[n-1] grad_z[n-1] = temp # back propogate for i in range(n-2,-1,-1): grad_b[i] = grad_z[i+1] grad_w[i] = np.dot(np.transpose(a[i]), grad_z[i+1]) grad_a[i] = np.dot(grad_z[i+1], np.transpose(w[i])) grad_z[i] = vsigmoid_prime(z[i])*grad_a[i] return grad_b, grad_w def accuracy(self, data_test): acc = 0 for x,y in data_test: y_hat = self.feed_forward(x) match = (np.argmax(y_hat) == np.argmax(y)) acc += int(match) return acc / len(data_test) def sigmoid(z): return 1/(1+math.exp(-z)) def sigmoid_prime(z): return (math.exp(-z))/((1+math.exp(-z))**2) vsigmoid = np.vectorize(sigmoid) vsigmoid_prime = np.vectorize(sigmoid_prime) def test(): net = Network([2,3,4,5]) data_train = [] for _ in range(1000): if random.randint(0,1) == 0: x = np.random.normal(loc = 0.6, scale = 0.15, size = (1,2)) y = np.array([1,0,0,0,0]) else: x = np.random.normal(loc = 0.2, scale = 0.15, size = (1,2)) y = np.array([0,0,0,0,1]) data_train.append((x,y)) net.sgd(data_train, 10, 50, 3.0) data_test = [] for _ in range(1000): if random.randint(0,1) == 0: x = np.random.normal(loc = 0.6, scale = 0.15, size = (1,2)) y = np.array([1,0,0,0,0]) else: x = np.random.normal(loc = 0.2, scale = 0.15, size = (1,2)) y = np.array([0,0,0,0,1]) data_test.append((x,y)) print(f&quot;Accuracy on testing data: {net.accuracy(data_test)}&quot;) test() .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/neural%20network/2020/07/09/neural1.html",
            "relUrl": "/python/data%20science/neural%20network/2020/07/09/neural1.html",
            "date": " • Jul 9, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Santander Dataset, Part I",
            "content": "Other posts in series . Santander Dataset, Part II, Feature Selection | . Introduction . I have started a new project. I had another look at the Kaggle datasets and chose this Santander dataset. The data is (superficially?) similar to that from the Credit Card Fraud dataset I have previously analysed: the data is clean, all numerical, and the task is to create a binary classifier. A big difference is that this Santander dataset has 200 features, whereas the Credit Card Fraud one had only 30 features. I presume this will make a difference (maybe I have to do some feature selection?), but I guess I will find out soon! Another difference is that we have two datasets: a training dataset on which we should create our models, and a testing dataset on which we use our models to make predictions which are then submitted to Kaggle. . Like with the credit card fraud project, I will start this one by creating some default models, and hopefully gain some ideas on how I ought to progress. . Default models . Some minimal data exploration shows that 90% of the training data has a target feature of 0 and 10% has target feature of 1. Due to this skew, I decide to us AUPRC to evaluate the models. Note that I split this training set further into a sub-training set and sub-testing set, fit the models on the sub-training set and evaluate the models using AUPRC on the sub-testing test. (Is there better terminology for this kind of thing?!). . Also, I did minor pre-processing, namely, I re-scaled the features to have a mean of 0 and a standard deviation of 1. . Logistic Regression . This does not look good. Lets see how other models do. . Decision Tree . This does even worse! I guess this should be expected of decision trees. It is also worth noting that this took a couple of minutes to create, so I decided not to create a random forest, because I presume it would take a very long time. . kNN . This also does poorly. However, I recently started reading Elements of Statistical Learning and it describes the ‘curse of dimensionality’, so I am not surprised by this low performance. Roughly, if you have many features, the nearest neighbours of a point are unlikely to be close to the point, and so not representative of that point. . XGboost . This has basically the same PRC as logistic regression, and much worse than what was achieved in the default credit card dataset. . SVM . And once again, a similar PRC to logistic regression and xgboost. Note that this one took a few hours to complete, so I will not be using these again for this project. . Handmade model . I used the same handmade model that I created in the credit card fraud project over here. As can be seen, this performance is in between the worst so far (decision tree and knn) and the best so far (xgboost, regression, svm). To me, this suggests that main issue is not with the number of features, but that maybe the dataset itself is difficult to work with and that it is hard to distinguish between the two classes. . Random model . Based on all these graphs above, it was clear I had misunderstood something basic about the PRC graph. I believed that the worst case scenario for this curve was a straight line joining the two corners, and initially thought that these models were doing either worse or just as good as a random model. After thinking for a bit, I realised my mis-understanding. To confirm my feelings, I created a purely random model and the PRC is above. This curve makes sense: we get a straight line with a precision of 0.1 because 10% of the data has a target value of 1. If you’re just making random guesses, then you should expect that 10% of the predicted positive cases are truly positive, i.e., you should expect to get a precision of 0.1. . I think this misunderstanding arose because I got mixed up with ROC curves, in which a random model does produce a straight line. . Next steps . I will try to improve the models by doing some feature selection. .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/2020/07/01/santander1.html",
            "relUrl": "/python/data%20science/2020/07/01/santander1.html",
            "date": " • Jul 1, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Investigating Credit Card Fraud, Part VI, Summary and Lessons from Kaggle",
            "content": "Other posts in series . Investigating Credit Card Fraud, Part V, Final Models . | Investigating Credit Card Fraud, Part IV, n_estimators . | Investigating Credit Card Fraud, Part III, Handmade Model . | Investigating Credit Card Fraud, Part II, Removing data . | Investigating Credit Card Fraud, Part I, First Models . | . Summaries . Part I . In Part I, I described the framework and created the first set of models using default settings. I tried logistic regression, decision tree, random forest and xgboost models, and they respectively achieved an AUPRC of 0.616, 0.746, 0.842 and 0.856. Since then, I have learnt about more models and if I were to do this project again, I would also have included a support vector machine model and a k-nearest-neighbour model. . . Part II . In Part I, it look some time to fit the models, the forest model in particular, and I wanted to do some hyper-parameter optimisations. I wanted to find out if I could reduce the time taken to fit by removing non-fraudulent claims. The results of the experimentation showed that the time to fit was proportional to the size of the training data set, but the AUPRC did not take a massive hit. This is good because it means I can do more hyper-parameter optimisations than before. . . Part III . Though the models were able to identify fraudulent transactions, I had gained no understanding. I tried creating a simple model: for each feature, determine whether the value is closer to the fraudulent mean or the non-fraudulent mean. This achieved an AUPRC of 0.682 and was able to identify about 70% of the frauduluent claims. This was satisfying, and better lets me appreciate what is gained by using more sophisticatd models. . . Part IV . I started doing some hyper-parameter optimisations on the forest model, and noticed the AUPRC varied a lot between the different folds. I decided to investigate how the AUPRC can vary, to better appreciate what is gained by choosing one hyper-parameter over another. After doing this, I could confidently say that choosing 50 estimators is better than the default of 100 estimators. . . Part V . Here I actually carry out the hyper-parameter optimisations, and train the final models. The random forest’s AUPRC increased from 0.842 to 0.852, and the xgboost’s AUPRC increased from 0.856 to 0.872. Modest gains, and from the few articles I have read, this is to be expected. . . Lessons learnt from Kaggle . I had a skim through the several most up-voted kernels on Kaggle. Below are the the things I found out by doing so. There is a lot for me to learn! . AUROC versus AUPRC . Many of the examples (including the most upvoted example!) use AUROC instead of AUPRC. The main reason this surprised me is that the description of the dataset recommended using AUPRC; I suppose there was an advantage to not knowing much before hand! The second reason this surprised me is that AUPRC is a more informative measure than AUROC for unbalanced data. I try to explain why. . The PRC and ROC are quite similar. They are both plots that visualise false positives against false negatives. . False negatives are measured in the same way in both plots, namely, using recall/true positive rate. Recall tells you what percentage of truly fraudulent transactions the model successfully labels as fraudulent. (And so 1 - Recall measures how many false negatives we have, as a percentage of truly fraudulent claims.) | False positive are recorded differently in the two plots. In PRC, precision is used. This is the percentage of transactions labelled as fraudulent that actually are fraudulent. Equivalently, 1-PRC is the number of false positives expressed as a percentage of claims labelled as fraudulent. | In ROC, the false-positive rate is used. This is the number of false positives expressed as a percentage of truly non-fraudulent transactions. | . | . To make this more concrete, lets put some numbers to this: . Imagine there are 100100 transactions altogether, 100 which are fraudulent and 100000 which are not. | Suppose a model predicts there are 200 fraudulent claims, and further suppose 50 of these were correct and 150 of these were incorrect. | For both PRC and ROC, the true positive measurement would be 50%: 50% of the fraudulent claims were found. | For PRC, the false positive measurement is 75%: 75% of the claims labelled as fraudulent were incorrectly labelled. | For ROC, the false positive measurement is 0.15%: only 0.15% of the non-fraudulent claims were incorrectly labelled as fraudulent. | . In short, ROC is much more forgiving of false positives than PRC, when we have highly unbalanced data. . I have also decided to plot PRC and ROC for a couple of the models in this series of posts, so you can visually see the difference. (Note that I have rotated the ROC curve to match up the variables with the PRC curve, so the comparison is easier.) . PRC and ROC for the final XGBoost model . ROC makes the model look much better than PRC does. And it is deceiving: one might look at that second chart and say we can identify 90% of fraudulent claims without many false positives. . PRC and ROC for the handmade model . Here, the effect is far more dramatic and very clearly shows how unfit AUROC is for unbalanced ata. . Under- and over-sampling . It turns out my idea from Part III, to remove non-fraudulent data, has a name: under-sampling. However, it sounds like there is an expectation that under-sampling could actually improve the performance of the models. This is surprising to me; unless you are systematially removing unrepresenative data, how can the model improve with less information?! A quick skim of the wikipedia article suggests I have not completely missed the point: ‘the reasons to use undersampling are mainly practical and related to resource costs’. . Over-sampling looks like an interesting idea, in which you create new artificial data to pad out the under-represented class. Some people on Kaggle used SMOTE, where you take two nearby points, and introduce new points directly in between these two points. Something to keep in mind for future! . Removing anomalous data . A simple idea: try to find entries in the training data that are not representative and remove them to avoid skewing the models / to avoid over-fitting. Based on my limited understanding, I think tree-based models are not sensitive to extreme data (in the same way the median is not sensitive to extreme data), so this particular idea is unlikely to have helped me improve the models for this example. However, this is another tool I will keep in mind for future projects. . Dimensionality reduction and clustering . An interesting idea: try to find a mapping of the data into a smaller dimension that preserves the clusters. The algorithm somebody used was t-SNE which is explained in this YouTube video. A couple of other algorithms used were PCA and truncated SVD. I do not yet understand how I could use this to improve the models (in the example, this was done to give a visual indication of whether frauduluent and non-frauduluent data could be distinguished). . Normalising data . Useful idea I should always keep in mind! Again, I don’t think this matters for tree-based models, but something I should keep in mind. . Outlier detection algorithms . One person used a bunch of (unsupervised?) learning algorithms: isolation forests, local outlier factor algorithm, SVM-based algorithms. More things for me to learn about! . Auto-encoders and latent representation . This person used ‘semi-supervised learning’ via auto-encoders. This was particularly interesting, especially because they had a visual showing how their auto-encoder was better at separating fraudulent and non-fraudulent data than t-SNE. This is definitely something for me to delve deeper into some time, especially because of how visually striking it is. . Visualising the features . Here and here are examples of a nice way of visualising the range of values of each feature for frauduluent and non-frauduluent data. The key thing is that they normalised the histograms, but I am not sure how they did that. Something for me to learn! . GBM vs xgboost vs lightGBM . This kernel compared three algorithms. I quite liked this because it felt historical, and helps me appreciate how the community learns. The person compared the accuracy and time taken for each of the algorithms, and also describes some new settings and options they recently discovered. .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/2020/06/25/creditcard6.html",
            "relUrl": "/python/data%20science/2020/06/25/creditcard6.html",
            "date": " • Jun 25, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Stop and Search, Part III, Data Analysis",
            "content": "Total number of stops and searches . Grouped by ethnicity . I start by plotting the total number of stops and searches (since May 2017 because that is the earliest data of the dataset), grouped by ethnicity. . . From this chart, a simplistic conlusion would be that white people are searched significantly more than other ethnicities, so there is no racism in the system. This is clearly bad reasoning, as we need to account for the underlying population. . Including population . Population data is taken from here. I use this data to produce the following chart. Note that I grouped the various numbers together in the same way I grouped ethnicities together in producing the ethnicities column. . . Now things look bad. There is clearly a discrepancy between the population and the number of stop and searches. . To visualise this discrepancy more clearly, I decided to create a Sankey diagram using Plotly. . . The diagram makes the discrepancy quite plain to see. Black people are stopped disproportionately more than other ethnic groups. There is evidently a big problem here. . However, and unfortunately, this diagram does not tell us where exactly the problem is. Is the problem with the police or is there a deeper problem? Are the police racist for stopping black people more often, or, is this a reflection of crime rates and the underlying social issues? . Some people would look at the above diagram and wonder how this is not conclusive evidence of police racism. To illustrate the idea, consider the following two charts: . . . The majority of people would not look at these charts and conclude that the police are sexist or ageist, so one should not use the chart above for ethnicity to automatically conclude the police are racist. . To try to shed some light on the question of racism, I will take into account the outcome of the stop-and-search. . Including outcomes . The following stacked barchart shows the breakdown of outcomes for each ethnicity. . . This is not at all what I was expecting. I was expecting to find that black people would have more false stop and searches than white people. It is shocking how consistent the ratio is across ethnicities - almost suspiciously so. There is some discrepancy if you look closely, but dramatically less than what the Sankey diagram above suggested. . Conclusions . My main goal for this was to gain some better understanding of crime data, and the process of cleaning and summarising data. To my surprise, it seems from this simple analysis that police stop-and-search is not inherently racist, but there is a high chance I have not accounted for something or that my process is over-simplistic. Of course, you should refer to more authoritative sources for conclusions on these complex issues, and not base your opinions on an amateur blog. . Some key lessons I learnt: . I had to make some key decisions about how to group the data, namely, how to deal with discrepancy between officer and self defined ethnicity. In particular, it is not clear how one ought to group people of mixed race. Given how even the ratios were in the final chart, I don’t think this decision made a major difference, but it is something that I now know to consider when reading research in this area. | Dramatically different stories can be told depending on how the data is presented. This is something I already knew, but this is the first time I have experienced creating the charts for myself. With great power, comes great responsibility. | The quality of this analysis totally depends on the quality of the underlying data. I did not mention this before, but there are gaps in the data: there are some police forces who do not provide the data for every month. This does not affect my simplistic analysis, but it would matter for more nuanced analyses. | The population data is from 2011, so there will be significant errors introduced by this mis-match between the datasets. | I have to, and do, trust that the data provided is accurate. It is scary to think how easily a government could skew the data, or simply withhold it. Going through this experience lets me better understand the dystopia in 1984. | . | . Code . Here I provide sample of the code used to produce the charts. . Below is the code to produce the first bar chart. . colours_255 = [(66, 133, 244,255), (234, 67, 53,255), (251, 188, 5,255), (52, 168, 83, 255)] colours = [ tuple(n / 255 for n in colour) for colour in colours_255] plt.figure sns.barplot(x = sas_ethnicity.index, y = sas_ethnicity, order = [&#39;White&#39;, &#39;Black&#39;, &#39;Asian&#39;, &#39;Other&#39;], palette = colours) plt.grid(True, axis = &#39;y&#39;) plt.title(&#39;Stop and Searches since May 2017, by Ethnicity&#39;) plt.xlabel(&#39;Ethnicity&#39;) plt.ylabel(&#39;Number of Stop and Searches&#39;) plt.tight_layout() plt.savefig(&#39;sas3_sas_eth.png&#39;) . Here is the code to produce Sankey diagrams. . # create function that plots Sankey diagram given appropriate dataframe def create_sankey(df, title): len = df.shape[0] fig = go.Figure(data=[go.Sankey( node = dict( pad = 15, thickness = 20, line = dict(color = &quot;black&quot;, width = 0.5), label = [&#39;Proportion of Population&#39;] + list(df.index) + [&#39;Proportion of Stop and Searches&#39;], color = &quot;blue&quot; ), link = dict( source = [0]*len + list(range(1,len+1)), target = list(range(1,len+1)) + [len+1]*len, value = df.iloc[:,0].append(df.iloc[:,1]) ))]) fig.update_layout(title_text=title, font_size=15) fig.show() # create dataframe containing population and stop and search data by ethnicity sas_eth_pop = pd.DataFrame({&#39;population&#39;: population, &#39;sas&#39;: sas_ethnicity, }, index = sas_ethnicity.index) sas_eth_pop = sas_eth_pop.loc[[&#39;White&#39;, &#39;Black&#39;, &#39;Asian&#39;, &#39;Other&#39;]] sas_eth_pop.sas = sas_eth_pop.sas/sas_eth_pop.sas.sum()*100 # create sankey diagram create_sankey(sas_eth_pop, &#39;Stop and Searches by Ethnicity&#39;) . Here is the code to produce the stacked barcharts at the end: . # group data by ethnicity and outcome. sas_eth_out = pd.DataFrame(sas.groupby([&#39;ethnicity&#39;, &#39;outcome&#39;]).outcome.count()) sas_eth_out.rename(columns = {&#39;outcome&#39;: &#39;frequency&#39;}, inplace = True) sas_eth_out.reset_index(inplace = True) # convert frequencies into percentages sas_eth_total = sas_eth_out.groupby([&#39;ethnicity&#39;]).frequency.sum() sas_eth_out[&#39;total&#39;] = sas_eth_out.ethnicity.map(lambda eth: sas_eth_total[eth]) sas_eth_out[&#39;percentage&#39;] = sas_eth_out.frequency / sas_eth_out.total * 100 # pivot table, and re-order the rows sas_new = pd.pivot_table(sas_eth_out, values = &#39;percentage&#39;, columns = &#39;outcome&#39;, index = &#39;ethnicity&#39;) sas_new = sas_new.loc[[&#39;White&#39;, &#39;Black&#39;, &#39;Asian&#39;, &#39;Other&#39;]] # plot the graph sas_new.plot.bar(stacked = True) plt.xlabel(&#39;Ethnicity&#39;) plt.ylabel(&#39;Percent of Stop and Searches&#39;) plt.title(&#39;Breakdown of Outcomes of Stop and Searches&#39;) plt.legend(labels = [&#39;False / no further action&#39;, &#39;Minor further action&#39;, &#39;Major further action&#39;], loc=&#39;center left&#39;, bbox_to_anchor=(1, 0.5)) plt.tight_layout() plt.savefig(&#39;sas3_outcome.png&#39;) .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/2020/06/22/sas3.html",
            "relUrl": "/python/data%20science/2020/06/22/sas3.html",
            "date": " • Jun 22, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Stop and Search, Part II, Data Cleaning",
            "content": "Other posts in series . Stop and Search, Part III, Data Analysis . | Stop and Search, Part I, Data Collection . | . The cleaning . I cleaned each column, one by one. Note I call the original frame sas and created a copy sas_clean in which I would do the cleaning. . To see a list of all the columns, I ran the code sas.columns. | To investigate the distribution of values in a column (before and after cleaning), I would use the code sas_clean.column.value_counts(dropna = False) | Some columns required no cleaning: age_range | gender | location.latitude and location.longitude (except I renamed thse columns) | force | month | . | The other columns did require some cleaning: self_defined_ethnicity and officer_defined_ethnicity | type | outcome | . | . Ethnicity . officer_defined_ethnicity was mostly clean. The distribution of values were: . White 608092 Black 259504 Asian 139531 NaN 91601 Other 31845 Mixed 2563 . The only change I made was to combine mixed with other. . self_defined_ethnicity was less clean, and the distribution of values were: . White - English/Welsh/Scottish/Northern Irish/British 475167 Other ethnic group - Not stated 154802 White - Any other White background 85322 Black/African/Caribbean/Black British - Any other Black/African/Caribbean background 78340 Black/African/Caribbean/Black British - African 66072 Black/African/Caribbean/Black British - Caribbean 49736 Asian/Asian British - Any other Asian background 44517 NaN 41149 Asian/Asian British - Pakistani 33907 Asian/Asian British - Bangladeshi 24128 Other ethnic group - Any other ethnic group 16449 Mixed/Multiple ethnic groups - Any other Mixed/Multiple ethnic background 15560 Asian/Asian British - Indian 14929 Mixed/Multiple ethnic groups - White and Black Caribbean 14063 White - Irish 7843 Mixed/Multiple ethnic groups - White and Black African 4246 Mixed/Multiple ethnic groups - White and Asian 3598 White - Gypsy or Irish Traveller 1689 Asian/Asian British - Chinese 1476 Other ethnic group - Arab 143 . I decided to group these up according to the same categories used in officer_defined_ethnicity. This was done using .replace: . def simplify_eth(ethnicity): if isinstance(ethnicity, float) or &#39;Not stated&#39; in ethnicity: return np.nan elif &#39;Other&#39; in ethnicity or &#39;Mixed&#39; in ethnicity: return &#39;Other&#39; elif &#39;Asian&#39; in ethnicity: return &#39;Asian&#39; elif &#39;Black&#39; in ethnicity: return &#39;Black&#39; elif &#39;White&#39; in ethnicity: return &#39;White&#39; ethnicities = {eth: simplify_eth(eth) for eth in sas.self_defined_ethnicity.unique()} sas_clean = sas_clean.replace(to_replace = ethnicities) . Finally, I wanted to create a column ethnicity that combines these two columns. I started by renaming the other two columns, creating the new column, and filling it in with values where there is no disagreement between the officer defined and self defined ethnicity. . sas_clean.rename(columns = {&#39;self_defined_ethnicity&#39;: &#39;self&#39;, &#39;officer_defined_ethnicity&#39;: &#39;officer&#39;}, inplace = True) sas_clean[&#39;ethnicity&#39;] = np.nan # if officer and self agree, set ethnicity to either. indices = (sas_clean.officer == sas_clean.self) sas_clean.loc[indices, &#39;ethnicity&#39;] = sas_clean.officer[indices] # if officer is null, set ethnicity to self, and vice versa indices = (sas_clean.officer.isnull()) sas_clean.loc[indices, &#39;ethnicity&#39;] = sas_clean.self[indices] indices = (sas_clean.self.isnull()) sas_clean.loc[indices, &#39;ethnicity&#39;] = sas_clean.officer[indices] . I created a column conflicted to list all the cases where the stated ethnicity differs: . sas_clean[&#39;conflicted&#39;] = np.nan indices = (sas_clean.officer != sas_clean.self) &amp; (sas_clean.officer.notna()) &amp; (sas_clean.self.notna()) sas_clean.loc[indices, &#39;conflicted&#39;] = sas_clean.officer[indices] + &#39;_&#39; + sas_clean.self[indices] sas_clean.conflicted.value_counts() . The output was: . Black_Other 18774 White_Other 12423 Asian_Other 6240 Other_Asian 5319 Other_White 4243 Black_White 2924 Asian_White 2394 White_Asian 2027 Black_Asian 1990 White_Black 1935 Other_Black 1764 Asian_Black 1577 . To decide how to deal with this, I went back into the original self_defined_ethnicity to determine what the appropriate label ought to be. . for i in sas_clean.conflicted.unique(): print(i) indices = (sas_clean.conflicted == i) print(sas.loc[indices, &#39;self_defined_ethnicity&#39;].value_counts()) print() . A sample of the output is: . Black_Other Mixed/Multiple ethnic groups - White and Black Caribbean 9158 Mixed/Multiple ethnic groups - Any other Mixed/Multiple ethnic background 4891 Mixed/Multiple ethnic groups - White and Black African 2689 Other ethnic group - Any other ethnic group 1835 Mixed/Multiple ethnic groups - White and Asian 194 White_Black Black/African/Caribbean/Black British - Any other Black/African/Caribbean background 815 Black/African/Caribbean/Black British - African 633 Black/African/Caribbean/Black British - Caribbean 487 Other_Black Black/African/Caribbean/Black British - African 819 Black/African/Caribbean/Black British - Any other Black/African/Caribbean background 750 Black/African/Caribbean/Black British - Caribbean 195 . Deciding how to deal with these cases was the trickiest part of the cleaning. First, this is a sensitive issue and it feels wrong for me to decide how people should be labelled. Second, there is clearly no ‘right’ answer here, and I have to use my judgement. In the end, for most cases, I chose the self_defined_ethnicity. However, the two big exceptions were when the officer identified the person as Black or White but the person identified themselves as mixed. There were 30000 such cases. If I added them to the ‘Other’ category, this would grossly skew the numbers and misrepresent the situation, so I decided to assign these Black and White (respectively). Different people will make different judgements on this, and I suppose this is one way our own biases can creep into the data analysis. . In the end, the distribution of ethnicities in this new column is: . White 645261 Black 269286 Asian 143468 NaN 40383 Other 34738 . Type . There are 3 types of stop-and-search: . Person search 861870 Person and Vehicle search 246976 Vehicle search 24290 . Theoretically, a vehicle search does not involve any people, and thus should not have any ethnicity attached to it. However, a quick query shows this is not the case: . sas_clean.loc[(sas_clean.type == &#39;Vehicle search&#39;), &#39;ethnicity&#39;].value_counts(dropna = False) NaN 20762 White 1796 Black 843 Asian 619 Other 270 . This gives some indication of how much inherent noise there is in the data. Given the numbers are relatively small, I did not worry about ignoring these entries and so just removed all Vehicle search entries. . sas_clean = sas_clean[sas_clean.type != &#39;Vehicle search&#39;] . Outcome . Last, I cleaned the outcome column. The distribution of values were: . A no further action disposal 675585 Arrest 126538 False 115566 Community resolution 50906 Suspect arrested 30616 Khat or Cannabis warning 26428 NaN 22090 Summons / charged by post 16366 Penalty Notice for Disorder 13617 Offender given drugs possession warning 12717 Local resolution 4709 Caution (simple or conditional) 4520 Suspect summonsed to court 2941 Offender given penalty notice 2802 Article found - Detailed outcome unavailable 2651 Offender cautioned 778 Suspected psychoactive substances seized - No further action 16 . I decided to replace these with a numerical value, where 0 represents that the stop-and-search discovered nothing inappropriate, 1 represents a minor infringement with minimal action and 2 represents a major infringement with significant action. . replacements = {&#39;A no further action disposal&#39;: 0, &#39;Arrest&#39;: 2, &#39;False&#39;: 0, &#39;Community resolution&#39;: 1, &#39;Suspect arrested&#39;: 2, &#39;Khat or Cannabis warning&#39;: 1, &#39;Summons / charged by post&#39;: 2, &#39;Penalty Notice for Disorder&#39;: 2, &#39;Offender given drugs possession warning&#39;: 1, &#39;Local resolution&#39;: 1, &#39;Caution (simple or conditional)&#39;: 1, &#39;Suspect summonsed to court&#39;: 2, &#39;Offender given penalty notice&#39;: 2, &#39;Article found - Detailed outcome unavailable&#39;: 1, &#39;Offender cautioned&#39;: 1, &#39;Suspected psychoactive substances seized - No further action&#39;: 1 } sas_clean[&#39;outcome&#39;] = sas_clean.outcome.replace(to_replace = replacements) sas_clean.outcome.value_counts(dropna = False) . The final distribution of values for outcomes is as follows: . 0.0 791151 2.0 192880 1.0 102725 NaN 22090 . It is surprising the the majority of stop-and-searches amount to nothing. It makes me wonder what the reasons for this are, and if there is a more efficient means of detecting the actual crimes with fewer false positives. . Conclusion and thoughts . That is end of the cleaning and tomorrow I will try to illustrate the patterns in the data with appropriate charts. . The two main lessons: . Data is inherently noisy, and one should not treat data as objective truth. (Though, it is the closest we have got!) | A data scientist has significant power to adjust the story, by grouping and cleaning the data differently. It seems that good practice is to be open about how you processed the data and to check how different choices affect the final results. | .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/2020/06/17/sas2.html",
            "relUrl": "/python/data%20science/2020/06/17/sas2.html",
            "date": " • Jun 17, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Do students do their homework last minute?",
            "content": "Introduction . In the STEM Foundation Year at the University of Leicester, we used the e-assessement system Numbas. This system recorded enough information for me to be able to investigate when students did their homework. . To help understand the charts that will come below, it will help to know how the assessment was structured. . There were two semesters. In Semester 1, we taught Physics 1, Physics 2 and Maths 1. | In Semester 2, we taught Physics 3, Physics 4 and Maths 2. | . | The physics modules were structured as follows: Each module lasted half a semester. | Each module had 4 weekly e-assessments, made available on Monday and had a deadline of 10am on the Monday after. | Various other assessments whose details do not matter. | . | The maths modules were structured as follows: Each module lasted a whole semester. | Each module had 8 weekly e-assessments, made available each Monday. | For Maths 1, there was a single deadline which was the weekend before exams. | For Maths 2, there were weekly deadlines like in Physics. | . | . The reason for the inconsistent structure is because we were trying to find out what works. . Collecting and cleaning the data . As mentioned above, we used the Numbas e-assessment system which recorded lots of data, including when students attempted their work. A colleague was in charge of maintaining the system, so I asked them to extract the data for this little project. They did this using a SQL query, and passed the data to me as a csv file. . I then cleaned the data. This involved: . Removing entries that did not correspond to my students. | Determining which assessment each entry corresponded to. This was trickier than expected, because the staff on our team used different naming conventions and because the system produced three different ids for each assessment. | Deciding how to deal with fact that we allowed students to attempt the assessment multiple times. In the end, I decided to pick the first attempt out of all these; it had negligible impact on the final charts. | Deciding how to deal with fact that a student could start an assessment on one day, but finish it later. I decided to pick the time a student first opened an assessment, which I called ‘Start Time’. | . On the technical side, I used R. . I learnt some R by working through R for Data Science, which is an excellent online book that I highly recommended. | For this project, the key tools I used were tibbles, piping and ggplot2. | The other noteworthy technical aspect of this project was getting the x-axis, representing time, to appear just as I wanted. I remember this took significant effort, banging my head over the table to understand POSIXct and POSIClt. | . The charts . Below are the charts for the Physics modules. The x-axis shows the day a student opened an e-assessment and the y-axis shows the number of student who started on each day. The different colours correspond to the different assessments. . . Physics 1, 2 and 4 all have the same patterns. . A good chunk of students open the e-assessment before the weekend. | The modal day to open the e-assessment is Sunday, the day before the deadline. | Several students open the e-assessment on Monday (so after midnight on Sunday). | The bars are shorter in the Physics 2 and Physics 4 charts because fewer students do those modules. | . Physics 3 has a different pattern. The first assessment has the same shape as in the other three modules. The other three assessments are flat for a few weeks and then all bunch up in the week beginning Monday 11th Feb. The reason is that at the end of the first week of Physics 3, we extended the deadline for all the assessments to 10am on Monday 18th Feb. (We did this to account for unforeseen circumstances). . Below are a sample of charts showing the breakdown of timings during Sunday and Monday. . . I do not think there is anything particularly noteworthy in these charts. The main pattern is that most people who started the work on Sunday did so after 6pm. The thing which struck me was that for each assessment, there were several students who started the work between 3am and 9am. . As a result of this data, the director of the Foundation Year decided to change the deadlines from 10am on Monday to 10pm on Sunday. . Below are the charts for the two maths modules. . . Recall that in Maths 1, there was a single deadline for all the assessments, which was the weekend before exam week. . In the first half of the semester, there is a decent chunk of students starting the e-assessments. | In the second half, engagement drops significantly. My explanation for this is that the e-assessments for Physics 2 were considerably longer/harder than those of Physics 1, but there are likely various factors. | A lot of work was done over the Christmas break. To my surprise, a few students left all the work to be done on the final weekend! | . Recall that Maths 2 had weekly deadlines. Recall also that Maths 2 runs concurrently with Physics 3 and Physics 4. . When we extended the deadline in Physics 3, we also had to do it for Maths 2. | Like in Physics 4, the deadlines for second half of Maths 2 were weekly. | Hence, the first half of Maths 2 resembles Physics 3, and the second half of Maths 2 resembles Physics 4. | . Conclusions . Many people who see this will say ‘This is obvious, what is the point?’. There are two main points. . First, it is good to have quantitative data. It provides clearer understanding and also allows us to measure changes from one year to the next. | Second, the higher education industry puts too little weight on (appropriate) data and observations. Either a lecturer simply does not care about teaching (in which case they put no weight on anything) or a lecture does care but bases their decisions on an imagined conception of what students are. | . What conclusions did I draw from this? . The pattern for weekly deadlines is consistent across the year: there is some activity throughout the week, with a clear peak the day before the deadline. One consequence is that we cannot assume comfort with material taught on Monday during a session later in the week, e.g., on Thursday. | . | Students respond to incentives, just like the rest of us. Our choices have a big impact on student habits. | Noteworthy to point out that most students do know the deadlines! This means we are communicating our deadlines well. | Thinking about incentives is important more generally. E.g. it explains the difference between attendance in lectures and attendance in assessed sessions. | . | These findings are particularly important for ‘linear’ subjects, where knowledge/understanding of Week 1 material is required to learn Week 2 material. | Shouldn’t judge students or label them as ‘bad students’. Better to label the habit, not the individual. | This is more to do with human nature, than students in particular. | This is mostly about incentives. Designing a course well includes creating incentives which result in good learning behaviours. (Compare with the famous example of opting-in or opting-out of a country’s organ donation registry.) | . | . Limitations of the data . There are several sources of noise and error in this data. I will say ‘data is positively biased’ to mean that data shows students working earlier than they actually are, and ‘negatively biased’ to say that data shows students are working later than they actually are. . Sources of positive bias. . Looking at Start Time. Students may open the assessment during the week, but actually only finish it on the weekend. | Students have multiple attempts on the coursework and I only looked at the start time of their earliest attempt. | I excluded students who did not attempt the coursework or attempted it late. | . Sources of negative bias. . There was a ‘Practice Version’ of each e-assessment available. Students were encouraged to use these to practice before attempting the actual assessed version. Some students did this, but a brief look at the data shows that most people did not attempt these. | Did not take into account mitigating circumstances, e.g. illness. | Does not account for other forms of independent study. E.g. a student might review lectures/workshop questions before attempting the e-assessment. | . Sources of unknown bias. . Most of our students have done A-Level Maths and/or Physics, so find the year easy. This probably means that students do not need to attempt coursework in a timely manner in order to keep up with the material. | This data only relates to specific style of coursework. There is no data on semester long projects, essays, etc. My prediction is that similar patterns will emerge, but spread out according to the size of the task. | Several students suspended or withdrew or were terminated during year. Their data will be included in early modules but not in later modules. | .",
            "url": "https://lovkush-a.github.io/blog/r/data%20science/2020/06/16/homework.html",
            "relUrl": "/r/data%20science/2020/06/16/homework.html",
            "date": " • Jun 16, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Stop and Search, Part I, Data Collection",
            "content": "Other posts in series . Stop and Search, Part III, Data Analysis . | Stop and Search, Part II, Data Cleaning . | . Introduction . In both traditional and social media, the issue of racial discrimination within the police is a hot topic. I decided to investigate this issue and better understand the statistics that go around. . I googled ‘crime data’ and one of the top results was data.police.uk, which seems like a reliable source of data for crime in the UK. With regard to race, the only data available on this website is about ‘stop-and-search’ (as opposed to prison data, for example). . Stop and search . In the UK, a police officer has the legal authority to stop and search you if they have ‘reasonable grounds’ to suspect you’re involved in a crime, e.g. carrying an illegal item. This UK Government website provides a short and clear summary of the rules, this Scottish Government website also provides clear summary of the rules but with more detail on what counts as reasonable and how a search should be conducted, and finally here is the actual legislation, which is predictably written in unclear legalese. . Downloading the data . I will only describe the final and clean code used to obtain the information I wanted, after several attempts necessary to get everything correct. . First, I downloaded a JSON file listing the name and ‘id’ of each police force, stored it in a pandas dataframe, and saved it as a csv file. The id is just a shortened version of their name and is used in all the other data sources. The code to do this is: . forces_response = requests.get(&#39;https://data.police.uk/api/forces&#39;) forces_json = forces_response.json() force_df = pd.DataFrame({&#39;id&#39;:[], &#39;name&#39;: []}) for entry in forces_json: force_df.loc[force_df.shape[0]] = [entry[&#39;id&#39;], entry[&#39;name&#39;]] force_df.to_csv(&#39;force.csv&#39;) . Next I downloaded a JSON file describing for which months and for which forces stop-and-search data was available: . availability_response = requests.get(&#39;https://data.police.uk/api/crimes-street-dates&#39;) availability_json = availability_response.json() availability_df = pd.DataFrame({&#39;month&#39;:[], &#39;id&#39;: []}) for entry in availability_json: date = pd.to_datetime(entry[&#39;date&#39;], format=&#39;%Y-%m&#39;).to_period(&#39;M&#39;) for id in entry[&#39;stop-and-search&#39;]: availability_df.loc[availability_df.shape[0]] = [date, id] . I then loop through this information and download the stop-and-search data, saving the data onto my laptop. . for i in range(availability_df.shape[0]): force = availability_df.iloc[i].id month = availability_df.iloc[i].month.strftime(&#39;%Y-%m&#39;) response = requests.get(f&quot;https://data.police.uk/api/stops-force?force={force}&amp;date={month}&quot;) if response.status_code == 200: data = response.json() with open(f&#39;{month}_{force}.json&#39;, &#39;w&#39;) as f: json.dump(data, f) . I add a column to the availability dataframe to track which pieces of data were actually successfully downloaded or not. I do this by trying to open each file, and recording a fail if an error occurs while trying to open it. (While writing this paragraph, I realise I could have done this at the same time as the previous step.) . availability_df[&#39;downloaded&#39;] = True for i in range(availability_df.shape[0]): force = availability_df.iloc[i].id month = availability_df.iloc[i].month.strftime(&#39;%Y-%m&#39;) try: file = open(f&#39;{month}_{force}.json&#39;, &#39;r&#39;) file.close() except: availability_df.iloc[i,2] = False print(f&#39;{month}_{force}&#39;) availability_df.to_csv(&#39;availability.csv&#39;) . Lastly, I combine all of the data into one mega pandas dataframe, keeping only those columns that I think will be relevant to my investigations. . cols = [&#39;age_range&#39;, &#39;outcome&#39;, &#39;self_defined_ethnicity&#39;, &#39;gender&#39;, &#39;officer_defined_ethnicity&#39;, &#39;type&#39;, &#39;location.latitude&#39;, &#39;location.longitude&#39;, &#39;force&#39;, &#39;month&#39;] sas_df = pd.DataFrame({col:[] for col in cols}) for i in range(availability_df.shape[0]): if availability_df.iloc[i,2]: force = availability_df.iloc[i].id month = availability_df.iloc[i].month month_str = month.strftime(&#39;%Y-%m&#39;) file = open(f&#39;{month_str}_{force}.json&#39;, &#39;r&#39;) data = json.load(file) new = pd.json_normalize(data) new[&#39;force&#39;] = force new[&#39;month&#39;] = month sas_df = sas_df.append(new, ignore_index=True)[cols] sas_df.to_csv(&#39;sas.csv&#39;) . A chart . It would be sad for this post to have no charts whatsoever, so I quickly created one which just counts the number of stops-and-searches, grouped by ethnicity. . . One might say, ‘Look, white people are stopped more than black people, so the police are not racist.’ This is obviously simplistic. The aim of the project is to dig deeper into the data and see what patterns I can find. .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/2020/06/15/sas1.html",
            "relUrl": "/python/data%20science/2020/06/15/sas1.html",
            "date": " • Jun 15, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "AIs for Games, Part III, Pruning Min-Max for Pentago",
            "content": "Other posts in series . AIs for Games, Part II, Min-max for Pentago . | AIs for Games, Part I, Brute Force TicTacToe . | . Performance before any optimisations . I created a few boards and timed how long it took the algorithm to run a depth-2 search on these boards, starting with both Player 0 and Player 1. An image showing the boards used is at the end of the post. The results are: . Board: 0, Player: 0, Time taken: 1.59 | Board: 0, Player: 1, Time taken: 1.58 | Board: 1, Player: 0, Time taken: 0.00117 | Board: 1, Player: 1, Time taken: 0.00103 | Board: 2, Player: 0, Time taken: 5.04 | Board: 2, Player: 1, Time taken: 4.94 | Board: 3, Player: 0, Time taken: 29.2 | Board: 3, Player: 1, Time taken: 32.0 | Board: 4, Player: 0, Time taken: 9.55 | Board: 4, Player: 1, Time taken: 9.25 | . I also tried running a depth-3 search on Board 4 for Player 1 (because Player 1 can find a winning move with this depth), but it did not finish running even after a couple of hours of running. . The optimisations . I made several optimisations. I describe them here chronologically, i.e., in the order I tried implementing them. . Alpha-beta pruning . There are situations where a board position does not need to be analysed, because based on the boards we have already analysed, this board position will definitely not be chosen in optimal player. This resulted in the following times: . Board: 0, Player: 0, Time taken: 1.34 | Board: 0, Player: 1, Time taken: 1.39 | Board: 1, Player: 0, Time taken: 0.00120 | Board: 1, Player: 1, Time taken: 0.00104 | Board: 2, Player: 0, Time taken: 5.28 | Board: 2, Player: 1, Time taken: 4.61 | Board: 3, Player: 0, Time taken: 26.1 | Board: 3, Player: 1, Time taken: 29.4 | Board: 4, Player: 0, Time taken: 8.62 | Board: 4, Player: 1, Time taken: 8.28 | . This was not a significant improvement in the times. I was surprised by this. I decided to run cProfile to try to determine why there was not a significant time-save. It seemed to be that the process of creating new boards was taking up a lot of time - and I was only pruning a board after the board was created. I needed to prune before the board was created. . To achieve this, I had to significantly re-structure the whole program, removing the frontier and instead writing the main function find_move recursively. The resulting times were a significant improvement: . Board: 0, Player: 0, Time taken: 1.07 | Board: 0, Player: 1, Time taken: 1.06 | Board: 1, Player: 0, Time taken: 0.00118 | Board: 1, Player: 1, Time taken: 0.00102 | Board: 2, Player: 0, Time taken: 1.90 | Board: 2, Player: 1, Time taken: 1.86 | Board: 3, Player: 0, Time taken: 5.33 | Board: 3, Player: 1, Time taken: 5.41 | Board: 4, Player: 0, Time taken: 2.98 | Board: 4, Player: 1, Time taken: 2.90 | . Phew! It was satisfying to see the times drop so much, and this motivated me to keep going. . Stop if winning move found . If a winning move was found in a current board position, there is no need to continue analysing this position, so can stop this early. Pruning does not detect this (at least, not how I implemented it. This could be a sign I did it wrong…), so I had to manually add this. This resulted in further improvements: . Board: 0, Player: 0, Time taken: 1.09 | Board: 0, Player: 1, Time taken: 1.11 | Board: 1, Player: 0, Time taken: 0.00104 | Board: 1, Player: 1, Time taken: 0.00119 | Board: 2, Player: 0, Time taken: 0.324 | Board: 2, Player: 1, Time taken: 0.344 | Board: 3, Player: 0, Time taken: 0.141 | Board: 3, Player: 1, Time taken: 0.897 | Board: 4, Player: 0, Time taken: 3.12 | Board: 4, Player: 1, Time taken: 2.93 | . I also tried running the depth-3 search on board 4, and to my surprise it ended in under a minute! . Board: 4, Depth 3, Time taken: 59.1 | . Note this would not be representative of a generic depth-3 search, because the winning move is found about 1/6 of the way into the full search. . Lists within lists . Running cProfile revealed that having nested lists to encode the board slows things down considerably, so I re-wrote the program so that the board was represented by a single list. I was worried this would take a lot of effort, but fortunately it consisted of replacing board[i][j] with board[6*i + j], and other similar simple changes. This halved the times: . Board: 0, Player: 0, Time taken: 0.407 | Board: 0, Player: 1, Time taken: 0.411 | Board: 1, Player: 0, Time taken: 0.000520 | Board: 1, Player: 1, Time taken: 0.000450 | Board: 2, Player: 0, Time taken: 0.175 | Board: 2, Player: 1, Time taken: 0.161 | Board: 3, Player: 0, Time taken: 0.0645 | Board: 3, Player: 1, Time taken: 0.424 | Board: 4, Player: 0, Time taken: 1.41 | Board: 4, Player: 1, Time taken: 1.41 | Board: 4, Depth 3, Time taken: 30.7 | . Checking if the game is over . Running cProfile again showed that the new bottle-neck was checking if the game had ended. This involved looping through the set of all possible winning lines, and checking to see if Player 0 or Player 1 occupied all the positions in each line. . Originally, I had one for-loop to check if Player 1 won, then another to check if Player 0 won. I changed this to have a single loop, and for each line check if Player 1 or Player 0 won. This resulted in another big chunk of time-saving. . Board: 0, Player: 0, Time taken: 0.292 | Board: 0, Player: 1, Time taken: 0.283 | Board: 1, Player: 0, Time taken: 0.000499 | Board: 1, Player: 1, Time taken: 0.000334 | Board: 2, Player: 0, Time taken: 0.101 | Board: 2, Player: 1, Time taken: 0.107 | Board: 3, Player: 0, Time taken: 0.0359 | Board: 3, Player: 1, Time taken: 0.261 | Board: 4, Player: 0, Time taken: 0.943 | Board: 4, Player: 1, Time taken: 0.915 | Board: 4, Depth 3, Time taken: 21.6 | . Checking cProfile showed that I had halved the time to check if the game had ended, but it was still the biggest bottle neck. . I then tried to re-design the program to cut down further, but to no avail. For example, I tried to group the set of lines into groups that could be ruled out together, e.g. if I know that position (2,2) in the board is empty, that rules out 7 of the lines. It will be interesting to know if there is a more efficient way to check if the game has ended! . Tidying up and fixing a “bug” . My code was becoming untidy (I was not using version control properly, and instead was creating multiple versions of functions in the same file) so I tidied up all the code. While doing this, I discovered that I did not correctly update the prune function during the ‘Lists within lists’ step: I was only pruning boards of at least depth 2, when it could be pruning board of depth 1. I made the necessary tweak, resulting in the following times: . Board: 0, Player: 0, Time taken: 0.0896 | Board: 0, Player: 1, Time taken: 0.0682 | Board: 1, Player: 0, Time taken: 0.000272 | Board: 1, Player: 1, Time taken: 0.000204 | Board: 2, Player: 0, Time taken: 0.100 | Board: 2, Player: 1, Time taken: 0.0539 | Board: 3, Player: 0, Time taken: 0.313 | Board: 3, Player: 1, Time taken: 1.13 | Board: 4, Player: 0, Time taken: 0.204 | Board: 4, Player: 1, Time taken: 0.310 | Board: 4, Depth 3, Time taken: 3.18 | . Woohoo! What big progress. What used to take hours now only takes 3 seconds. . Duplicate board positions . The last thing I wanted to try was dealing with repeat positions. Previously I only skipped these if the same position occurred and they had same parent. But now I wanted to have a way of skipping board positions regardless of where they were in the game-tree. This took many hours to get correct, because my first attempt caused the algorithm to produce sub-optimal moves, and I had no idea why. . The error was that when I pruned a board, I would finalise the board’s value, though the board was not fully analysed. Then, when the board occurred somewhere else in the tree, I would use this incomplete value and miss out all the analysis that was pruned the first time around. . After fixing the bug, the new times are: . Board: 0, Player: 0, Time taken: 0.2888009548187256 | Board: 0, Player: 1, Time taken: 0.15045881271362305 | Board: 1, Player: 0, Time taken: 0.00028705596923828125 | Board: 1, Player: 1, Time taken: 0.0002300739288330078 | Board: 2, Player: 0, Time taken: 0.0822603702545166 | Board: 2, Player: 1, Time taken: 0.03888416290283203 | Board: 3, Player: 0, Time taken: 0.30017614364624023 | Board: 3, Player: 1, Time taken: 0.7593698501586914 | Board: 4, Player: 0, Time taken: 0.3503570556640625 | Board: 4, Player: 1, Time taken: 0.3380570411682129 | Board: 4, Depth 3, Time taken: 3.19 | . The times are not always better, and some are worse. . Next steps and final thoughts . The next step is to introduce neural networks. A brief google search reveals that min-max is not appropriate and that I should have been using reinforcement learning. Doh! In the back of my mind, I was curious as to how the neural network could learn the heuristic function; what would the loss/error be that it would minimise? . Though the optimisation of the min-max algorithm is incomplete (e.g. I do not understand why the latest version is not faster than the previous version), I will end it here. This is because I have already spent a couple of days on this, I have already learnt from this, and it is not necessary for the bigger goal of developing a neural network. . Some final takeaways: . I should have sketched out a plan of the whole project. Though I had basic knowledge of neural networks, I should have researched a bit more and found out that min-max is not appropriate for neural networks. | Be more thorough with testing. It makes spotting bugs easier and quicker. | Seed random number generators. I used used random heuristics (to see effects of pruning), but I did not seed them. This means the times above are not fair comparisons, as some random numbers could have lead to more pruning than others. | Use proper version control. My code got hideous at one point. At least now I have a better sense of the workflow of git. | . The code . The code, at this stage of project, can be found on github. . The boards used for testing . .",
            "url": "https://lovkush-a.github.io/blog/ai/python/2020/06/09/games3.html",
            "relUrl": "/ai/python/2020/06/09/games3.html",
            "date": " • Jun 9, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "AIs for Games, Part II, Min-max for Pentago",
            "content": "Other posts in series . AIs for Games, Part III, Pruning Min-Max for Pentago . | AIs for Games, Part I, Brute Force TicTacToe . | . The algorithm . In my last post, I said I wanted to code up an alpha-beta pruning algorithm. (See this CS50 Intro to AI lecture for background on tree-based search and alpha-beta pruning). Over the past couple of weeks, I have been thinking about exactly how the algorithm would work and how I would code it up, and it was surprisingly tricky. I therefore decided to just focus on creating an algorithm that would search through a game-tree up to some maximum depth, but in a way that I could add in the pruning. . The algorithm should determine the ‘value’ of the current board state and the move that would achieve that value. A value of 1 means that Player 1 will win (with perfect play) and a value of 0 means that Player 0 will win (with perfect play). A value in the middle indicates which player is more likely to win, as judged by the algorithm. . The general idea of the algorithm is straightforward: . Given a board position, create an initial node and add it to the frontier. | While the initial node does not have a value, pick a node from the frontier and do the following: Check if the game has ended. If so, determine who won, and set the value of the node appropriately. Then update the value of parent nodes appropriately. | Check if the depth of the node is the maximum depth. If so, then estimate the value of the position. For now, I just set this as 0.5, but in future, this will be determined via a neural network. Then update the value of parent nodes appropriately. | Create a list of legal moves and possible board positions arising from this node. Create new nodes and add them to the frontier. | . | Once the initial node has a value, pick a move whose resulting board position has the same value. | The tricky part was the step ‘update the value of the parent nodes appropriately’. It took me some time to flesh out all the details and determine exactly when a parent node should have its value updated. I had to do this in a way so that I could add on the pruning later without having to change the structure of the code. The main ideas were: . Whenever a node has its value determined, the upper or lower bounds of its parent’s node, and only its parent’s node, needs to be updated. . | Whenever all of a node’s children’s values are determined, the node’s value can be determined. This will sometimes lead to some recursive updating of node values. . | . A big sticking point for me was how to decide when to prune a node: it felt like I needed knowledge of uncle/aunt nodes to do this, but following the ideas above, the grandparent node and parent node should contain enough information to decide if a node can be pruned or not. . In the end, I managed to get it altogether. The code, at this stage of the project, can be found on github. . An example . . The image above shows an example winning position for player 1. If it is Player 1’s move, the algorithm finds a winning move using a depth-1 search (play in bottom left, and then rotate bottom left clockwise, giving 5-in-a-row column on left-hand-side). If it is Player 2’s move, the algorithm returns None using a depth-2 search, because no matter what 2 does on this turn, 1 will always win. . The code . The code, at this stage of project, can be found on github. . Areas of improvement . The algorithm is highly inefficient. It takes roughly 10-50 seconds to do depth-2 searches, and on the order of hours for depth-3 search. This is way too long! The number of possible positions after 3 moves is roughly a few million, so that shouldn’t take hours to sort through. . There are many inefficiencies I am aware of and will fix them for my next post. Examples include: . Dealing with repeat positions. Right now, I only avoid positions that repeat if they arise from the same parent. | I currently use a list to track which positions have been visited in the search, to check for repeats. This is less efficient than a set, but I can’t use arrays in sets and all my boards are coded as arrays. I will try changing everything to tuples. | If a winning/losing sequence is found, it will keep on searching. This is not necessarily a bad thing, because we might want to analyse all the lines, but it definitely slows things down. | Not using alpha-beta pruning, yet. | Not doing any time analysis. I will run cProfile to systematically find inefficiencies. | .",
            "url": "https://lovkush-a.github.io/blog/ai/python/2020/06/04/games2.html",
            "relUrl": "/ai/python/2020/06/04/games2.html",
            "date": " • Jun 4, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "Investigating Credit Card Fraud, Part V, Final Models",
            "content": "Other posts in series . Investigating Credit Card Fraud, Part VI, Summary and Lessons from Kaggle . | Investigating Credit Card Fraud, Part IV, n_estimators . | Investigating Credit Card Fraud, Part III, Handmade Model . | Investigating Credit Card Fraud, Part II, Removing data . | Investigating Credit Card Fraud, Part I, First Models . | . Forest model, hyper-parameter selection . I tidied up the code from yesterday to allow me to optimise for more than one parameter at once. For each combination of hyper-parameters, I obtained 20 different AUCs (by using five 4-fold cross validations). The results were stored in a pandas dataframe. The code for this is at the bottom of the page. . I then averaged over all the folds and sorted the results. The code for this and the output is below. . auc_forest.max_depth.fillna(value = 0, inplace = True) auc_forest_mean = auc_forest.groupby([&#39;n_estimators&#39;, &#39;max_depth&#39;, &#39;max_features&#39;]).auc.mean() auc_forest_mean.sort_values(ascending = False).head(20) n_estimators max_depth max_features auc 50.0 0.0 10.0 0.774015 50.0 10.0 0.774015 60.0 0.0 10.0 0.772589 50.0 10.0 0.772589 10.0 10.0 0.772573 50.0 10.0 10.0 0.772328 40.0 10.0 10.0 0.771290 80.0 0.0 10.0 0.771108 50.0 10.0 0.771108 40.0 0.0 10.0 0.770744 50.0 10.0 0.770744 50.0 0.0 7.0 0.770522 50.0 7.0 0.770522 80.0 10.0 10.0 0.770487 50.0 10.0 7.0 0.770472 60.0 50.0 7.0 0.770472 0.0 7.0 0.770472 10.0 7.0 0.770025 40.0 50.0 5.0 0.769278 auto 0.769278 . A few things were found by doing this: . The best options for the hyper-parameters are n_estimators = 50, max_depth = None and max_features = 10. | max_depth = None and max_depth = 50 produced the same models. This means that maximum depth achieved without any limits is less than 50. | max_features = auto and max_features = 5 produced the same models. This is obvious in retrospect: auto means taking the square root of the number of features, and we had about 30 features. | . Forest model, final model . Using these hyper-parameters, I created a the final Random Forest model. The precision-recall curve is below: . . For comparison, the very first random forest model is also included. As can be seen, there is an improvement but a seemingly minimal one. Based on examples I have seen elsewhere, these minor improvements are what can be expected from hyper-parameter optimisations. . XGBoost model . I repeated the process above for XGBoost models. The best parameter settings were as follows: . n_estimators max_depth learning_rate auc 50.0 5.0 0.05 0.761125 100.0 5.0 0.02 0.760002 50.0 10.0 0.05 0.759094 15.0 0.05 0.758146 100.0 10.0 0.02 0.757185 15.0 0.02 0.756748 200.0 10.0 0.02 0.747032 15.0 0.02 0.743830 50.0 15.0 0.10 0.742954 10.0 0.10 0.739922 100.0 10.0 0.05 0.737840 15.0 0.05 0.737013 50.0 10.0 0.02 0.729299 15.0 0.02 0.729239 5.0 0.02 0.729049 200.0 5.0 0.02 0.727433 50.0 15.0 0.30 0.726696 5.0 0.20 0.726479 100.0 5.0 0.20 0.724851 15.0 0.30 0.722728 . Using the settings from the top row, I created my final model, whose precision-recall curve is below. I have included the original curve, too. . . !! After doing the optimisations, the model became worse! The AUC decreased by 0.002. The explanation for this must be that removing 99% of the data actually changes the behaviour of the model. . I re-did the process but only removing 90% of the data (recall from Part II that in XGBoost, removing 90% of the data did not decrease performance that much). This time, the optimal settings were as follows: . n_estimators max_depth learning_rate auc 200.0 10.0 0.10 0.816130 5.0 0.10 0.815648 100.0 5.0 0.10 0.807745 10.0 0.10 0.806940 200.0 10.0 0.05 0.805212 5.0 0.05 0.801478 50.0 10.0 0.10 0.797015 5.0 0.10 0.794567 100.0 5.0 0.05 0.793189 10.0 0.05 0.792732 200.0 5.0 0.02 0.785652 10.0 0.02 0.783957 50.0 5.0 0.05 0.779087 10.0 0.05 0.778968 100.0 5.0 0.02 0.776565 10.0 0.02 0.775092 50.0 5.0 0.02 0.761190 10.0 0.02 0.760388 . The optimal parameters changed (thankfully!). I then re-created the final model and this time there was an improvement: . . Next time . My next blog post will be the final one in this series. I will summarise what I have done and what I have learnt. I will also have a look at what others did and see what I can learn from them. . The code . The code is provided for the Random Forest optimisation. The code for XGBoost is similar. . # import modules import numpy as np import pandas as pd from sklearn.model_selection import train_test_split, KFold from sklearn.metrics import precision_recall_curve from sklearn.metrics import auc from matplotlib import pyplot as plt import seaborn as sns from sklearn.ensemble import RandomForestClassifier from xgboost import XGBClassifier import itertools #import data data = pd.read_csv(&quot;creditcard.csv&quot;) y = data.Class X = data.drop([&#39;Class&#39;, &#39;Time&#39;], axis = 1) #create train-valid versus test split Xtv, X_test, ytv, y_test = train_test_split(X,y, random_state=0, test_size=0.2) # create function which takes model and data # returns auc def auc_model(model, Xt, Xv, yt, yv): model.fit(Xt,yt) preds = model.predict_proba(Xv) preds = preds[:,1] precision, recall, _ = precision_recall_curve(yv, preds) auc_current = auc(recall, precision) return auc_current # create options for hyperparameter n_estimators = [40, 50, 60, 80] max_depth = [None, 5, 10, 50] max_features = [&#39;auto&#39;, 3,5,7,10] random_state = range(5) # create frame to store auc data auc_forest = pd.DataFrame({&#39;n_estimators&#39;: [], &#39;max_depth&#39;: [], &#39;max_features&#39;: [], &#39;fold&#39;: [], &#39;auc&#39;: [] }) # loop through hyper parameter space for n, md, mf, rs in itertools.product(n_estimators, max_depth, max_features, random_state): kf = KFold(n_splits = 4, shuffle = True, random_state = rs) model = RandomForestClassifier(n_estimators = n, max_depth = md, max_features = mf, random_state = 0) i=0 for train, valid in kf.split(Xtv): Xt, Xv, yt, yv = Xtv.iloc[train], Xtv.iloc[valid], ytv.iloc[train], ytv.iloc[valid] # remove 99% of the non-fraudulent claims from training data to speed up fitting selection = (Xt.index % 100 == 1) | (yt == 1) Xt_reduced = Xt[selection] yt_reduced = yt[selection] auc_current = auc_model(model, Xt_reduced, Xv, yt_reduced, yv) auc_forest.loc[auc_forest.shape[0]] = [n, md, mf, 4*rs+i, auc_current] i+=1 .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/2020/05/30/creditcard5.html",
            "relUrl": "/python/data%20science/2020/05/30/creditcard5.html",
            "date": " • May 30, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "Investigating Credit Card Fraud, Part IV, `n_estimators`",
            "content": "Other posts in series . Investigating Credit Card Fraud, Part VI, Summary and Lessons from Kaggle . | Investigating Credit Card Fraud, Part V, Final Models . | Investigating Credit Card Fraud, Part III, Handmade Model . | Investigating Credit Card Fraud, Part II, Removing data . | Investigating Credit Card Fraud, Part I, First Models . | . First attempt . I used a k-fold cross validation with 4 folds to determine what is a good number of estimators for the Random Forest model. The code to do this is at the bottom. The table below shows the AUC metrics obtained. . Fold n_estimators = 10 n_estimators = 50 n_estimators = 100 n_estimators = 200 n_estimators = 500 . 0 | 0.765 | 0.793 | 0.775 | 0.770 | 0.756 | . 1 | 0.683 | 0.690 | 0.691 | 0.680 | 0.664 | . 2 | 0.766 | 0.783 | 0.781 | 0.784 | 0.774 | . 3 | 0.815 | 0.841 | 0.838 | 0.833 | 0.826 | . From this table, we can see that the AUC depends a lot more on the fold rather than the hyper-parameter. I was surprised at how much the AUC could vary, depending on how the data was chopped up. Nevertheless, it is still clear that the optimal choice for the number of estimators is either 50 or 100. However, it is hard to judge if 50 is definitely better than the default of 100; it is better in 3 out of the 4 folds but maybe this was just a fluke. . I wanted to better understand how the AUC depends on the folds, and make a better decision about which hyper-parameter is better, so I decided to repeat this process many times and see the resulting patterns. . Second attempt . I repeated the first attempt 20 times and stored the results in a pandas dataframe. I then plotted scatterplots and histograms to visualise the patterns. In each of them, I compared the performance against the default of 100 estimators. As always, the code for this is at the bottom. . n_estimators=10 . . The histogram shows that the distribution of AUC values when the number of estimators is 10 is worse than the default values. The scatterplot shows the default setting has a better AUC on the majority of folds - but not every time! . n_estimators=50 . . The histograms almost perfectly overlap! But we do see a little extra blue on the right and extra orange on the left which means n=50 is better. The scatterplot makes this clearer, showing that having 50 estimators produces larger AUC in most of the folds. . n_estimators=200 and n_estimators=500 . . . From these charts, we see that as we increase the number of estimators beyond 100, the model performs worse. Though we can see this in the table in the first attempt, these charts make it much clearer. . Final thoughts . Visualisations are nice! Though the first k-fold validation gave the same conclusions as twenty k-fold validations, the latter is far more convincing and enlightening. In addition to being more certain that n=50 is a superior choice, I have gained knowledge about how much the AUC can vary as the data varies. . Furthermore, the idea of removing data to speed up the fitting (from Part II of the series) really paid off. Generating these charts required 320 fittings altogether. Without removing the data, this would have taken multiple days, so I would never have done it. . Next time, I will complete the hyper-parameter optimisations and present my final models. . Code for first attempt . #create train-valid versus test split Xtv, X_test, ytv, y_test = train_test_split(X,y, random_state=0, test_size=0.2) #create KFold object kf = KFold(n_splits = 4, shuffle = True, random_state = 0) #create function to determine auc given the data def auc_model(model, Xt, Xv, yt, yv): model.fit(Xt,yt) preds = model.predict_proba(Xv) preds = preds[:,1] precision, recall, _ = precision_recall_curve(yv, preds) auc_current = auc(recall, precision) return auc_current # create list of n_estimators for RandomForest n_estimators = [10, 50, 100, 200, 500] # create variable to store aucs aucs = np.zeros([5,4]) # loop through hyper-parameter values and folds i=0 for n_estimator in n_estimators: j = 0 model = RandomForestClassifier(n_estimators = n_estimator, random_state = 0) for train, valid in kf.split(Xtv): Xt, Xv, yt, yv = Xtv.iloc[train], Xtv.iloc[valid], ytv.iloc[train], ytv.iloc[valid] # remove 99% of the non-fraudulent claims from training data to speed up fitting selection = (Xt.index % 100 == 1) | (yt == 1) Xt_reduced = Xt[selection] yt_reduced = yt[selection] auc_current = auc_model(model, Xt_reduced, Xv, yt_reduced, yv) aucs[i][j] = auc_current j += 1 i += 1 . Code for second attempt . # create list of n_estimators for RandomForest n_estimators = [10, 50, 100, 200, 500] # create variables to store auc data aucs = np.zeros([5,4]) auc_df = pd.DataFrame({&#39;n_estimators_&#39;+str(n_estimators[i]): [] for i in range(len(n_estimators))}) # create 20 different KFolds, so we get 80 models for each value of hyperparameter for random_state in range(20): kf = KFold(n_splits = 4, shuffle = True, random_state = random_state) i=0 for n_estimator in n_estimators: j = 0 model = RandomForestClassifier(n_estimators = n_estimator, random_state = 0) for train, valid in kf.split(Xtv): Xt, Xv, yt, yv = Xtv.iloc[train], Xtv.iloc[valid], ytv.iloc[train], ytv.iloc[valid] # remove 99% of the non-fraudulent claims from training data to speed up fitting selection = (Xt.index % 100 == 1) | (yt == 1) Xt_reduced = Xt[selection] yt_reduced = yt[selection] auc_current = auc_model(model, Xt_reduced, Xv, yt_reduced, yv) aucs[i][j] = auc_current j += 1 i += 1 # update dataframe auc_df with latest batch of aucs for j in range(4): auc_df.loc[auc_df.shape[0]] = aucs[:,j] .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/2020/05/29/creditcard4.html",
            "relUrl": "/python/data%20science/2020/05/29/creditcard4.html",
            "date": " • May 29, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "Bacon numbers via Recursive SQL",
            "content": "SQL in Python . I ran the SQL commands in Python using the module sqlite3. I used this article to help me set it all up. Below is the code to run queries on the database movies.db in python. . import sqlite3 def run_sql(query): connection = sqlite3.connect(&#39;movies.db&#39;) cursor = connection.cursor() cursor.execute(query) results = cursor.fetchall() cursor.close() connection.close() return results . Understanding the database . The data is in the form of a database, movies.db, and was obtained from the online course CS50, which in turn was obtained from imdb. To find out the structure of the tables in the database, I ran the following code (obtained from stackoverflow). . def produce_schema(): sql = &quot;SELECT name FROM sqlite_master WHERE type = &#39;table&#39;;&quot; tables = run_sql(sql) schema = {} for table in tables: sql = f&quot;SELECT sql FROM sqlite_master WHERE type = &#39;table&#39; and name = &#39;{table[0]}&#39;&quot; results = run_sql(sql) print(results[0][0]) schema[table[0]] = results[0][0] return schema produce_schema() . For the task of determining bacon numbers, the relevant tables and columns are: . people, with columns id and name. Each person has a unique id. There are 1044499 people in the table. | stars, with columns movie_id and person_id. Each row tells you that the actor with id person_id starred in the movie with id movie_id. | . Kevin Bacon has an id of 102, found by running the query SELECT id FROM people WHERE name = &#39;Kevin Bacon&#39; . The recursive query . To understand recursion in SQL, I recommend this guide which explains recursion and how to use recursion in SQL, and then the SQLite documentation to better understand some implementation details and what options are available to you. . The query I created to produce the table of bacon numbers is: . WITH RECURSIVE costars(id1, id2) AS ( SELECT stars1.person_id, stars2.person_id FROM stars AS stars1 JOIN stars AS stars2 ON stars1.movie_id = stars2.movie_id ), bacon(id, num) AS ( VALUES(102, 0) UNION SELECT id2, num+1 FROM bacon JOIN costars ON bacon.id = costars.id1 WHERE num &lt; 13 ) SELECT bacon.id, name, MIN(num) FROM bacon JOIN people ON bacon.id = people.id GROUP BY bacon.id ORDER BY num . The table costars lists all pairs of actors that co-starred in a movie. This is obtained by doing a self-join of the stars table. | The table bacon is the main table. id is the id of the actor and num is the bacon number. It starts off with the entry (102,0). 102 is Kevin Bacon’s id and 0 is Kevin Bacon’s Bacon number. | Then for any entry (id, num) already in the table, we add a new row (id2, num+1), whenever id2 co-starred with id. | num &lt; 13 indicates we will only have a maximum bacon number of 13. Without this manual limit, the recursive query would never end. This is because the underlying data is not acyclic: e.g. if a is a co-star with b, then b is a co-star of a. The number 13 was chosen via trial-and-error. The resulting table does not change if I increase the limit further, which implies that the maximum bacon number is 13. | . | In the end, I select the relevant data from this recursive construction. Because each actor can appear many times in this construction, I use GROUP BY to ensure each actor appears only once. I use MIN(num) to select each actor’s earliest appearance. | . The two main problems with this query are that: . It is inefficient. There is huge redundancy as actors appear many times in the recursive construction. I do not think there is a way of avoiding this within SQL. | I have to know what the maximum Bacon number is for the query to produce a complete list. I found this using trial-and-error. | . Bacon number of 13 . By running a simple query, I find there are two people with the maximum bacon number of 13, Javier Ordonez and Kimberly Peters. Using the program created for this CS50 AI project, I could find the path from these actors to Kevin Bacon. As expected, it takes 13 steps (always satisfying to see two different programs being consistent!) and they are below. Note they have the same path. . Javier Ordonez/Kimberly Peters and Amanda Brass starred in PRND | Amanda Brass and Michael Bayouth starred in Park Reverse Neutral Drive, PRND (Director’s cut) | Michael Bayouth and Brandy Bourdeaux starred in Grease Trek | Brandy Bourdeaux and Kim Beuché starred in Murder Inside of Me | Kim Beuché and Ed Baccari starred in Island, Alicia | Ed Baccari and Aida Angotti starred in Late Watch | Aida Angotti and Lamont Copeland starred in Bottom Out | Lamont Copeland and Ashley Marie Arnold starred in Eye Was Blind | Ashley Marie Arnold and Sid Bernstein starred in The Rodnees: We Mod Like Dat! | Sid Bernstein and Chuck Berry starred in The Beatles: The Lost Concert | Chuck Berry and Eric Clapton starred in Chuck Berry Hail! Hail! Rock ‘n’ Roll | Eric Clapton and Tom Cruise starred in Close Up | Tom Cruise and Kevin Bacon starred in A Few Good Men |",
            "url": "https://lovkush-a.github.io/blog/sql/python/2020/05/24/recursion_sql.html",
            "relUrl": "/sql/python/2020/05/24/recursion_sql.html",
            "date": " • May 24, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "AIs for Games, Part I, Brute Force TicTacToe",
            "content": "Other posts in series . AIs for Games, Part III, Pruning Min-Max for Pentago . | AIs for Games, Part II, Min-max for Pentago . | . The AI in Action . Below are screenshots illustrating the AI in action. . 1) I run the program, select the AI to play first, and respond to its first move. . . 2) The AI plays in the top left, forcing me to play in the middle left. . . 3) The end is nigh. The AI creates two threats at once. I stop one of them… . . 4) But I cannot stop both. . . AI: 1, Humans: 0. . Comments . This program is highly inefficient. E.g it will search through every possible move, even if it has already found a winning sequence. My focus was on getting something working, rather than trying to optimise it. . Next steps . Coding up more complicated games. I have already done this for Pentago (see github). | Coding up the alpha-beta pruning algorithm | Coding up a neural network to create a heuristic function | . Code . The code for this is available on github. .",
            "url": "https://lovkush-a.github.io/blog/ai/python/2020/05/20/games1.html",
            "relUrl": "/ai/python/2020/05/20/games1.html",
            "date": " • May 20, 2020"
        }
        
    
  
    
        ,"post15": {
            "title": "Investigating Credit Card Fraud, Part III, Handmade Model",
            "content": "Other posts in series . Investigating Credit Card Fraud, Part VI, Summary and Lessons from Kaggle . | Investigating Credit Card Fraud, Part V, Final Models . | Investigating Credit Card Fraud, Part IV, n_estimators . | Investigating Credit Card Fraud, Part II, Removing data . | Investigating Credit Card Fraud, Part I, First Models . | . The hand-made model . Given the training data, for each feature, I compute the mean of that feature amongst all fraudulent transactions and the non-fraudulent transactions. For example, the mean value of the transaction was $124 for fraudulent transactions and $88 for non-fraudulent transactions. . Then, given some unseen transaction, I ask how many of its features are closer to the fraudulent mean or non-fraudulent mean. For example, if the value of a transaction is $115, then it is closer to the fraudulent mean of $124, so this is evidence the transaction is fraudulent. . And that’s it! This is not sophisticated at all, but I am interested to see how much information is contained in the means, and more importantly, how much information is gained by using more sophisticated models like Random Forests and XGBoosts. . Results . Below is the precision-recall graph for the model. . . The AUC score is not great, only 0.616, but the model manages to identify ~70% of fraudulent claims with a precision of 0.8, which is not too bad! . At the end of the previous post, I said I hoped to achieve a score of 0.7. To do this, I just flattened the above precision-recall curve, by grouping together all the ‘high probability’ transactions (see code for explicit details). See the new curve: . . An AUC of 0.68! Not quite 0.7, but not too shabby. . Final thoughts . There are several ways one could easily improve this model. One example is that I weighted each of the features equally, but some features ought to be more weighted than others. Another example is that I did not consider how much closer a value was to the fraudulent mean compared to the non-fraudulent mean. There are many more possibilities. However, all of these are just the initial steps to creating one of the standard models - this hand-made model is just a (bad) Random Forest after all! . Doing this hands-on modelling has been quite satisfying. Though Random Forests and XGBoosts produce much better models, they did not actually teach me anything. Of course, one big reason for this is that I do not yet know how to extract information from those models - I have only learnt how to create them. Even so, there is something immediately tangible in the simplicity of this hand-made model: 70% of fraudulent transactions follow the average trends of previous fraudulent claims. Though I am prepared to be wrong, I doubt the insights from XGBoosts will be as easy to formulate as that! . The code . # import modules import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.metrics import precision_recall_curve from sklearn.metrics import auc from matplotlib import pyplot as plt # import data and create train_test split data = pd.read_csv(&quot;creditcard.csv&quot;) y = data.Class X = data.drop([&#39;Class&#39;], axis = 1) Xt, Xv, yt, yv = train_test_split(X,y, random_state=0) # calculate means for fraudulent and non-fraudulent claims for training data data_t = pd.concat([Xt, yt], axis = 1) means = data_t.groupby(&#39;Class&#39;).mean() means_mid_point = (means.loc[0] + means.loc[1])/2 # create function to create predictions def make_prob(row): prob = 0 for col in row.index: if (row[col] &gt; means_mid_point[col]) and (means.loc[1, col] &gt; means.loc[0, col]): prob += 1 elif (row[col] &lt; means_mid_point[col]) and (means.loc[1, col] &lt; means.loc[0, col]): prob += 1 return prob/30 # create predictions, calculate AUC and plot PRC preds = Xv.apply(make_prob, axis = 1) precision, recall, _ = precision_recall_curve(yv, preds) auc_handmade = auc(recall, precision) plt.plot(recall, precision, marker = &#39;.&#39;) plt.xlabel(&#39;Recall&#39;) plt.ylabel(&#39;Precision&#39;) plt.title(f&#39;Hand-made model. AUC = {auc_handmade:.3f}&#39;) plt.savefig(&#39;creditcard_3_handmade&#39;) # tweak predictions to &#39;flatten the curve&#39; preds2 = [] for pred in preds: if pred &gt; 0.7: preds2.append(0.8) else: preds2.append(pred) .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/2020/05/19/creditcard3.html",
            "relUrl": "/python/data%20science/2020/05/19/creditcard3.html",
            "date": " • May 19, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "Investigating Credit Card Fraud, Part II, Removing data",
            "content": "Other posts in series . Investigating Credit Card Fraud, Part VI, Summary and Lessons from Kaggle . | Investigating Credit Card Fraud, Part V, Final Models . | Investigating Credit Card Fraud, Part IV, n_estimators . | Investigating Credit Card Fraud, Part III, Handmade Model . | Investigating Credit Card Fraud, Part I, First Models . | . My thinking and plan . When doing the initial investigations, I noticed it took some time for the fitting, in particular for the random forest models to be fit. I want to do some hyper-parameter optimisations, but do not want to wait hours for it. Therefore, I wanted to reduce the time it takes. . I figured that 10% of the non-fraudulent data should contain most of the patterns that 100% of the non-fraudulent data does, and presumably having smaller datasets reduced the run time. . To reduce the datasets, I first split the data using train_test_split as normal. Then, I kept only those non-fraudulent entries whose index had final digit 0 - so I only have 10% remaining. . To better understand the effect removing data has, I tried removing different amounts of data, from 50% to 99%. The code for all this is at the bottom of the page. . Results for Random Forests . The charts below show what happened as I varied how much data was removed. . . As I hoped, the time taken for the fitting to take place reduces as the dataset is made smaller. (In fact, time taken is linear with size of dataset. I don’t know if this is surprising or not, but I imagine it is clear if one knows implementation details of the algorithms). Also as I predicted, the effectiveness does not drop considerably by removing data. . The charts below show some of the resulting AUC curves, so we can see where the drop in performance occurs. . . We can see that removing non-fraudulent data has resulted in reduced precision, with no visible drop in recall. This makes sense: I did not remove any of the fraudulent entries, so it looks like the models were still able extract the same information about them. . This is encouraging. In the context of credit card fraud, recall is more important than precision: the cost of fraud is greater than cost of annoying customers by mis-labelling their transactions as fraudulent. . Results for XGBoost . I ran the process on XGBoost models too. The charts are below. . . The results are similar to those for the random forest. The compute time is linear with the amount of data kept, and performance does not drop much either. Surprisingly, the performance is almost the same with only 10% of the data: only a 0.007 drop in the AUC! It looks like XGBoost is more ‘data-efficient’ than Random Forest: to get good performance, XGBoost requires less data than Random Forests. . Next steps . The next steps will be to do some hyper-parameter optimisations. But before that, like mentioned in Part 1, I want to better understand the data by creating a crude hand-made model. It will be interesting to see how it compares! My hope is to get an AUC of 0.7. . The code . Below is the code to produce the XGBoost models and charts. The code for Random Forest is similar. . # import modules import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.metrics import precision_recall_curve from sklearn.metrics import auc from matplotlib import pyplot as plt from sklearn.ensemble import RandomForestClassifier from xgboost import XGBClassifier from datetime import datetime # import data and create train_test split data = pd.read_csv(&quot;creditcard.csv&quot;) y = data.Class X = data.drop([&#39;Class&#39;], axis = 1) Xt, Xv, yt, yv = train_test_split(X,y, random_state=0) # create function which takes model and data # returns auc, time taken, and saves plot. def auc_model(model, title, saveas, Xt, Xv, yt, yv): t0 = datetime.now() model.fit(Xt,yt) t1 = datetime.now() time = t1 - t0 time = time.total_seconds() preds = model.predict_proba(Xv) preds = preds[:,1] precision, recall, _ = precision_recall_curve(yv, preds) auc_current = auc(recall, precision) plt.figure() plt.plot(recall, precision, marker=&#39;.&#39;, label=&#39;basic&#39;) plt.xlabel(&#39;Recall&#39;) plt.ylabel(&#39;Precision&#39;) plt.title(title + f&#39;. AUC={auc_current:.3f}&#39;) plt.savefig(saveas + &#39;.png&#39;) return time, auc_current # create multiply xgb models with varying amount of data removed model_xgb = XGBClassifier() fraction_kept = [1,0.5,0.2,0.1,0.05,0.02,0.01] times = [] aucs = [] for f in fraction_kept: selection = (Xt.index % (1/f) == 0) | (yt == 1) Xt_reduced = Xt[selection] yt_reduced = yt[selection] title = f&#39;XGB Model. Keeping {100*f:.0f}% of non-fraudulent data&#39; saveas = f&#39;creditcard_2_xgb_{100*f:.0f}&#39; time_new, auc_new = auc_model(model_xgb, title, saveas, Xt_reduced, Xv, yt_reduced, yv) times.append(time_new) aucs.append(auc_new) # plot charts to show effect of changing fraction of non-frauduluent data removed plt.figure() plt.plot(fraction_kept, times, marker=&#39;.&#39;) plt.xlabel(&#39;Fraction of non-fraudulent data kept&#39;) plt.ylabel(&#39;Time to fit the model, seconds&#39;) plt.title(&#39;XGB. Fraction of non-fraudulent data kept vs time for fitting&#39;) plt.savefig(&#39;creditcard_2_xgb_times&#39;) plt.figure() plt.plot(fraction_kept, aucs, marker=&#39;.&#39;) plt.xlabel(&#39;Fraction of non-fraudulent data kept&#39;) plt.ylabel(&#39;AUC of model&#39;) plt.title(&#39;XGB. Fraction of non-fraudulent data kept vs AUC&#39;) plt.savefig(&#39;creditcard_2_xgb_aucs&#39;) .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/2020/05/16/creditcard2.html",
            "relUrl": "/python/data%20science/2020/05/16/creditcard2.html",
            "date": " • May 16, 2020"
        }
        
    
  
    
        ,"post17": {
            "title": "Trouble with Jekyll",
            "content": "For reasons unknown to me, Jekyll stopped working, and Googling around did not reveal a fix. I decided to create a fresh directory, create a new Conda environment, and install everything again. However, this did not work! . This was strange - it all worked the first time around without a hitch. After much Googling and several failed attempts, I just took a break and decided to come back to it tomorrow (now today). I was agitated and frustrated. I was worried this blog would die out before it even got going! . Today, the first thing I tried was installing Jekyll outside of any environment, i.e., without creating a Conda environment. This failed because “You don&#39;t have write permissions for the /Library/Ruby/Gems/2.3.0 directory”. I googled and this stackoverflow page explained that I should not try to over-ride these permissions, but instead use chruby and ruby-install. . Googling those lead me to this little guide. I followed the steps and it all seemed to work as expected. (Note, I am uncomfortable manually modifying hidden files like .zshrc. Is this normal?). . Now came the moment of truth. I enter gem install jekyll bundler into terminal. . … . And it works! Phew! OK, now it’s actually time to practice some data science. .",
            "url": "https://lovkush-a.github.io/blog/other%20it/2020/05/14/jekyll.html",
            "relUrl": "/other%20it/2020/05/14/jekyll.html",
            "date": " • May 14, 2020"
        }
        
    
  
    
        ,"post18": {
            "title": "Investigating Credit Card Fraud, Part I, First Models",
            "content": "Other posts in series . Investigating Credit Card Fraud, Part VI, Summary and Lessons from Kaggle . | Investigating Credit Card Fraud, Part V, Final Models . | Investigating Credit Card Fraud, Part IV, n_estimators . | Investigating Credit Card Fraud, Part III, Handmade Model . | Investigating Credit Card Fraud, Part II, Removing data . | . Quick Personal Background . I have been studying programming and data science using various resources. The main resources I have used so far, for data science specifically, are the Kaggle Courses. I have completed: . Intro to Machine Learning | Intermediate Machine Learning | Pandas | Data Visualisation | . Following the advice I have read in numerous places, I decided I should try to do some data science of my own - not just follow some exercises. I skimmed through the Kaggle datasets, and this dataset on credit card fraud caught my fancy, so I jumped right in! . First steps . In the description, it said that there are 284807 transactions with only 492 labelled as fraudulent. The task is to create a model to predict which transactions are fraudulent. The description also said that because the percentage of fraudulent cases is so small, it is best to use “AUPRC”, Area Under the Precision-Recall Curve, to evaluate the model. I had not heard of this yet so I did some Googling. . I found this blog post by Jason Brownlee, which explained what AUPRC is with some examples. This was helpful and I used the same packages he did. . Before going onto AUPRC and my models, I should say that there was no need to do any data cleaning for this dataset. It had already been cleaned and the data has been anonymised via a PCA. Again, I have not studied this yet, but a brief skim of this wikipedia article on PCAs gives me some basic insight. It looks neat actually - it replaces the original data with new data which captures the variation in the old data but in such a way that the features in the new data have minimal correlation between them. My intuition is that the less correlation there is between features, the better the models works. PCA is definitely something I need to look into more at some point! . AUPRC . I will try to summarise the idea behind AUPRC. . The framework. We have features X and we are trying to predict y. In this case, y says whether the transaction is fraudulent or not. If y=0 then the transaction is not fraudulent, and if y=1 then it is. | The models produce values of y between 0 and 1, representing the probability of a transaction being fraudulent. | To decide if a transaction is fraudulent or not, we need to also specify a threshold probability, p. If y&gt;p, we label that transaction as fraudulent. | . | Precision and Recall Precision is the fraction of transactions that are labelled as fraudulent that actually are fraudulent. I somehow find it easier to think about 1-Precision, which measures how many false-positives we have. | Recall is the fraction of actually fraudulent transactions the model manages to label as fraudulent. Again, I find it easier to think about 1-Recall, which measures how many false-negatives we have. | A perfect model has a precision and a recall of 1. This is not possible and we need to make a trade-off between them. This trade-off is achieved by varying the threshold probability p. | . | The Precision Recall curve When p=1, we are saying all transactions are not fraudulent (because you need to assign a probability greater than 1 in order it to be considered fraudulent, which is not possible). Therefore, there are no false positives so we have a precision of 1, but we have not found any of the fraudulent transactions, so the recall is 0. | When p=0, we are saying all transactions are fraudulent. Therefore, all the fraudulent transactions are found so we have a recall of 1, but we have a huge number of false positives, so a precision almost equal to 0. | As we vary p from 1 to 0, we move from the the coordinate (0,1) to (1,0), and we are hoping to get as close to the coordinate (1,1) as possible. | . | The Area Under the Precision-Recall Curve The closer we get to (1,1), the larger the area under the curve is. | A perfect model would reach (1,1) and achieve an area of 1. | The worst model, where you assign probabilities at random, will produce a straight line connecting (0,1) to (1,0), giving an area of 0.5. | Thus the AUPRC is a measure of the model, with a value between 0.5 and 1. | . | Enough text, time for pictures . Below you will find the precision-recall charts for the various models that were created, along with their AUPRC metric. . Basic model . I started by creating a basic model, where it just assigns a probability of 0.1% for any transaction to be fraudulent. . . As you can see from the chart and the AUPRC of 0.501, this model is poor. No surprises here, which I suppose is a good thing. . Logistic Regression . I have not studied logistic regression yet so I do not actually know what it does differently to linear regression. I decided to still use it because it is the model Jason Brownlee used in their example, and I wanted to follow their example before exploring on my own. . . Huzzah! My first non-trivial AUC curve. The model can identify 60% of the fraudulent cases without too many false positives (roughly 20%). The precision falls dramatically if you try to increase the recall. . Decision Tree . Next I tried a Decision Tree model. (This is the first model taught in Kaggle). . . Curve looks very simple, but it has actually extracted some information. It can identify ~75% of the fraudulent cases with a precision of roughly 0.75. I would argue this is better than the logistic regression, because the cost of fraud is greater than the cost of mis-identifying something as fraud. . Random Forest . Next I tried a Random Forest model. (This is the second model taught in Kaggle). . . Woh! I was surprised by how good this is. 80% of the fraudulent cases identified with a precision of 95%! Lets see if the infamous XGBoost can do better. . XGBoost . Drum roll please… . . Looks very similar to the random forest model. I do not know if this is surprising or not - hopefully I will get more intuition for these kind of things with more practice. . Next steps . There are various things I would like to try. . Exploring the data a bit and creating a crude handmade model. Something like find the average of Xi in fraudulent cases and in non-fraudulent cases. Then the probability of being fraudulent is determined by whether you are closer to the fraudulent means than the non-fraudulent means. | Hyper-parameter optimisations. I used only default settings for all the models. I just wanted to get something made and published before trying to mess around with settings. | Seeing what happens if I randomly delete 90% of the fraudulent cases from the training. My prediction is there will not be significant loss in information but there should be significant time savings. (The random forest model took a few minutes to run.) This will make hyper-parameter training quicker. | Exploring the models themselves. What are the probabilities produced by the models? What patterns have the models found? | After I have done my own investigations, find out what other people did. | . The code . Below is the code to produce the XGBoost model. The code for other models is identical but with ‘XGB’ replaced as appropriate. (At some point in future, I will use for loops to loop through the models.) . # import modules import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.metrics import precision_recall_curve from sklearn.metrics import auc from matplotlib import pyplot from sklearn.linear_model import LogisticRegression from sklearn.tree import DecisionTreeClassifier from sklearn.ensemble import RandomForestClassifier from xgboost import XGBClassifier # create test validation split y = data.Class X = data.drop([&#39;Class&#39;], axis = 1) Xt, Xv, yt, yv = train_test_split(X,y, random_state=0) # create model and predictions model_xgb = XGBClassifier(random_state = 0) model_xgb.fit(Xt, yt) predictions_xgb = model_xgb.predict_proba(Xv) predictions_xgb = predictions_xgb[:,1] # calculate precision, recall and AUC xgb_precision, xgb_recall, _ = precision_recall_curve(yv, predictions_xgb) xgb_auc = auc(xgb_recall, xgb_precision) # plot precision recall curve pyplot.plot(xgb_recall, xgb_precision, marker=&#39;.&#39;, label=&#39;basic&#39;) pyplot.xlabel(&#39;Recall&#39;) pyplot.ylabel(&#39;Precision&#39;) pyplot.title(f&#39;XGBoost model. AUC ={xgb_auc:.3f}&#39;) pyplot.savefig(&#39;creditcard_1_xgb.png&#39;) .",
            "url": "https://lovkush-a.github.io/blog/python/data%20science/2020/05/14/creditcard1.html",
            "relUrl": "/python/data%20science/2020/05/14/creditcard1.html",
            "date": " • May 14, 2020"
        }
        
    
  
    
        ,"post19": {
            "title": "Making this blog",
            "content": "I decided to create a blog after reading David Robinson’s advice. I had read many times before that I ought to create a blog/portfolio, but somehow this article was the tipping point. I recommend reading it! . | I got a basic understanding of Jekyll and Github Pages by following Jonathan McGlone’s guide. It has minimal pre-requisites and is accessible to beginners. I did not follow all the steps, but it was a good starting point. It was easy to get something up and running, and it recommends resources to move forwards. . | I followed Jekyll’s’ step-by-step tutorial. This is excellent. It is clear and it builds things up logically. A few minor details: . I created a Conda environment in which I installed Ruby and Jekyll. | I cloned the GitHub repository from Step 2 into this enviroment, and adapted the steps as appropriate (e.g. copying the CSS from Step 2 into the SASS file). | I do not set up ‘authors’, as I am going to be the only author on this blog! | . | As with most of these things, the upfront cost is high and it requires patience to get through it. But now that I have done it, I am extremely pleased. Having created my personal website using a hodge-podge of HTML, CSS and PHP, I can appreciate how much smoother Jekyll makes everything. It is refreshing. . Goodbye, angled-brackets! You shan’t be missed. .",
            "url": "https://lovkush-a.github.io/blog/other%20it/2020/05/13/blog.html",
            "relUrl": "/other%20it/2020/05/13/blog.html",
            "date": " • May 13, 2020"
        }
        
    
  
    
        ,"post20": {
            "title": "First blog post",
            "content": "This is my first blog post! :D .",
            "url": "https://lovkush-a.github.io/blog/2020/05/12/first.html",
            "relUrl": "/2020/05/12/first.html",
            "date": " • May 12, 2020"
        }
        
    
  
    
        ,"post21": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lovkush-a.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post22": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lovkush-a.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Lovkush Agarwal. I recently decided to change careers and become a data scientist. Following David Robinson’s’ advice, I decided to create this blog. . To find out more about me, check out my personal website. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lovkush-a.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lovkush-a.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}